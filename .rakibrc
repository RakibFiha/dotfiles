#!/usr/bin/env bash

#shopt -s autocd
## my implementation of autocd without shopt switch
autocd(){   (( $? == 126 )) && {
    if [[ -d "$_" ]]; then
      cd "$_"
    fi
  }
}
# or do cxe to open command buffer <control + x + e > in linux so the func is cxe
# usage cxe <command number from history>
cxe() { fc "$@"; }

# mkdir and cd
mkcd(){
  case "$1" in
    -p) mkdir -p "$2" && cd "$_" ;;
    *) mkdir "$1" && cd "$_" ;;
  esac
}

# touch and chmod and vim
touchme(){ touch "$1" && chmod +x "$_" && vim "$_"; }

# url shortener
# usage: echo "URL" | tinyurl
# usage: tinyurl "URL"
tinyurl(){
  if (( $# == 0 )); then
    IFS= read -r link
    curl -s tinyurl.com/api-create.php?url="${link}"
  else
    local link="$1"
    curl -s tinyurl.com/api-create.php?url="${link}"
  fi
}

# text sharing
# usage: echo "hello world" | shareit
# usage: shareit "some thing" 
# usage: echo "${texts}" | curl -F 'f:1=<-' ix.io
shareit(){
  if (( $# == 0 )); then
    curl -F 'f:1=<-' ix.io < /dev/stdin
  else
    curl -F 'f:1=<-' ix.io <<< "$1"
  fi
}

# 
b64decode()
{
    if (( $# == 0 )) ; then
        base64 --decode < /dev/stdin
        echo
    else
        base64 --decode <<< "$1"
        echo
    fi
}
# for git
__git_init_folder_for_python(){
local README='
### Description
Python3 Project

### Installation

```
python3 -m venv ./
source bin/activate
pip3 install -r requirements.txt
```'

local GITIGNORE='
### For venv
__pycache__/
bin/
lib/
include/
pyvenv.cfg
'
command git init \
  && python3 -m venv ./ \
  && . bin/activate \
  && pip3 install --upgrade pip \
  && pip3 freeze > requirements.txt 
  [[ ! -f "README.md" ]] && printf "%s\n" "$README" > README.md
  [[ ! -f ".gitignore" ]] && printf "%s\n" "$GITIGNORE" > .gitignore
}

__make_git_folder(){
  case "$1" in
    python )
      __git_init_folder_for_python
      ;;
    * )
      echo "not found"
  esac
}

git(){
  local ARG1="$1"
  local ARG2="$2"
  case "$ARG1" in
    'init' )
      if [[ "$ARG2" == "python" ]]; then
        __make_git_folder "$ARG2"
      else
        command git "$ARG1"
      fi
      ;;
    *)
      command git "$@" 
  esac
}

mkfs.ext4(){
  sudo $(brew --prefix e2fsprogs)/sbin/mkfs.ext4 "$@"
}

refresh()
{
  if [[ "$(uname)" == "Darwin" ]]; then
    if [[ "${SHELL}" == "/bin/zsh" ]]; then
      source ~/.zshrc
    else
      . ~/.bash_profile
    fi
  elif [[ "$(uname)" == "Linux" ]]; then
  . ~/.bashrc
  else
    echo "$(uname) not known"
  fi
}

## Edit history
eh()
{
  history -a ; nvim + ~/.bash_history ; history -r ;
}

whereami(){ echo "$HOSTNAME"; }

__exit()
{
    echo "Error!!"; [[ ! -z "$1" ]] && { local errorMsg="$1"; printf "$errorMsg"; };
    kill -INT $$;
}

check_update_status()
{
    if [[ "$( uname )" == "Darwin" ]]; then
      work="$home/Environments";
      [[ -f /tmp/.brew-outdated ]] && {
          outdated_brew=$(cat /tmp/.brew-outdated);
              (( outdated_brew > 0 )) && {
                  echo -e "🍺 You have $outdated_brew brew update(s) .🍺";
              }
      }
      [[ -f /tmp/.cask-outdated ]] && {
          outdated_cask=$(cat /tmp/.brew-outdated);
              (( outdated_cask > 0 )) && {
                  echo -e "🍺 You have $outdated_cask cask update(s) .🍺";
              }
          }
      [[ -f /tmp/.pip3-outdated ]] && {
          outdated_pip3=$(cat /tmp/.pip3-outdated);
              (( outdated_pip3 > 0 )) && {
                  echo -e "🐍 You have $outdated_pip3 pip3 update(s) .🐍";
              }
          }
      [[ -f /tmp/.npm-outdated ]] && {
          outdated_npm=$(cat /tmp/.npm-outdated);
              (( outdated_npm > 0 )) && {
                  echo -e "ⓝ Ⓟ ⓜ You have $outdated_npm npm update(s) .ⓝ Ⓟ ⓜ";
              }
          }
      #[[ -f /tmp/.port-outdated ]] && {
      #    outdated_port=$(cat /tmp/.port-outdated);
      #        (( outdated_port > 0 )) && {
      #            echo -e "📦 You have $outdated_port port update(s) .📦";
      #        }
      #    }
      let local outdated=$((outdated_brew + outdated_cask + outdated_pip3 + outdated_npm))

      (( outdated > 0 )) && {
          echo -e "🍺 🐍 ⓝ Ⓟ ⓜ 📦 You have $outdated outdated packages...";
          echo -e "🍺 🐍 ⓝ Ⓟ ⓜ 📦 Do 'update_all_now' to update all of them...";
      }
    fi
}

myPS1Prompt()
{
    #autocd
    local outdated_brew=0 outdated_cask=0 outdated_pip3=0 outdated_npm=0; #outdated_port=0;
    ## For home directory show 🏠 instead of ~
    where=$(pwd)
    home=$HOME
    work="$home/Environments";

    check_update_status;

    if [[ "$where" == "$home" ]]; then
        # where="${where/$home/🏠 }";
        export PS1='\[👉🏠🖐 💲\] ';
        export PS2='\[⏩\] ';
        # echo "Welcome back to home!"
      else
            # where="${where/$work/👨‍💻}";
            # export PS1="$where \n⏩  "
            export PS1="👉🏛 \e[1;34m\W\e[m \e[1;33m\e[m🔥\n💲 ";
            ## the space at the end keeps the line to make, m helps to prevent line break
            # export PS1="👉🏛 \e[1;34m\W\e[m \e[1;33m\e[m🔥💲 ";
            # export PS1='👉🏛 \e[1;34m\W\e \e[1;33m\e🔥💲 ';
            export PS2='\[⏩\] ';
    fi
}

function is_macos() {
    test "$(uname)" == "Darwin"
  }

function is_linux() {
    test "$(uname)" == "Linux"
  }

## https://superuser.com/questions/570000/source-new-bashrc-in-all-open-terminals
## Linux
if is_linux; then
  bashrc_sourced=$(stat -c %Y ~/.bashrc)
  PROMPT_COMMAND='
      test $(stat -c %Y ~/.bashrc) -ne $bashrc_sourced && source ~/.bashrc
  '
## MacOS
elif is_macos; then
  bashrc_sourced=$(stat -f %m ~/.bash_profile)
  test $(stat -f %m ~/.bash_profile) -ne $bashrc_sourced && source ~/.bash_profile

  # Open Chrome from the command line. http:// will be added automatically if no protocol is specified.
  # e.g. chrome google.com
  function chrome() {
      URL=$1
      if [[ $1 != http* ]] ; then
          URL="http://$1"
      fi
      is_macos && /usr/bin/open -a '/Applications/Google Chrome.app' "$URL"
  }
  function brave() {
      URL=$1
      if [[ $1 != http* ]] ; then
          URL="http://$1"
      fi
      is_macos && /usr/bin/open -a '/Applications/Brave Browser.app' "$URL"
  }
  # Open Safari from the command line in the same way as chrome()
  function safari() {
      URL=$1
      if [[ $1 != http* ]] ; then
          URL="http://$1"
      fi
      /usr/bin/open -a '/Applications/Safari.app' "$URL"
  }
  function browse() {
    echo "$link"
  }

  # Open discord
  function discord(){
    /usr/bin/open -a /Applications/Discord.app
  }

  function slak(){
    /usr/bin/open -a /Applications/Slack.app
  }

  function calendar(){
    /usr/bin/open -a /Applications/Calendar.app
  }
  
  function takenote(){
    /usr/bin/open -a /Applications/Joplin.app
  }

  _count_updates() {
    local type=$1 f=/tmp/.$type-outdated upd=0
    [[ -f $f ]] && { local upd=$( cat "$f" ); }
    echo $upd
  }

  _has_updates() {
    local type=$1 cnt=$( _count_updates $type );
    [[ $cnt -gt 0 ]] && { return 0; } || { return 1; }
  }

  _update_prompt() {
    local type=$1
    local icon=$2

    local upd=$( _count_updates $type )
    [[ "$upd" -gt 0 ]] && {
      echo -e "\x1B[104m\x1B[97m$icon You have $upd $1 update(s).$icon \x1B[0m";
    }
  }

  function update_all_now() {
    $(command -v bash) /Users/mdrakiburrahman/Environments/system_script/brewPipNpmUpdateChecker.cron
      # if $( _has_updates brew ); then
      #     echo "Updating Brew";
          brew update && brew upgrade && brew cleanup && rm -rf "$(brew --cache)";
      # fi

      # if _has_updates npm; then
          echo "Updating NPM"
          npm update -g
      # fi

      if _has_updates pip2; then
          echo "Updating Pip2"
          pip2 list --outdated --format=freeze | cut -d = -f 1 | xargs -n1 pip2 install -U
          echo "Running pip update again, because that's necessary"
          pip2 list --outdated --format=freeze | cut -d = -f 1 | xargs -n1 pip2 install -U
      fi

      if _has_updates pip3; then
          echo "Updating Pip3"
          pip3 list --outdated --format=freeze | cut -d = -f 1 | xargs -n1 pip3 install -U
          echo "Running pip update again, because that's necessary"
          pip3 list --outdated --format=freeze | cut -d = -f 1 | xargs -n1 pip3 install -U
      fi

      if _has_updates ckan; then
          echo "Updating CKAN"
          ckan upgrade --all
      fi

      # if _has_updates port; then
      #    echo "Updating ports";
      #    sudo port selfupdate;
      #    sudo port upgrade outdated;

          ## update app store apps
          echo "Updating app store apps:"
          mas upgrade; ## Update app store apps
      # fi

    $(command -v bash) /Users/mdrakiburrahman/Environments/system_script/brewPipNpmUpdateChecker.cron
    echo "Finished updating"
  }

  omnidisksweeper()
  {
    # https://askubuntu.com/questions/875812/in-terminal-how-do-you-run-a-sudo-command-with-an-at-the-end-without-prior-aut?noredirect=1&lq=1
    # sudo bash -c '/Applications/OmniDiskSweeper.app/Contents/MacOS/OmniDiskSweeper &' > /tmp/.omni 2>&1
    sudo rm -rf /private/var/root/.Trash/*
    [[ "$(uname)" == "Darwin" ]] && sudo bash -c '/Applications/OmniDiskSweeper.app/Contents/MacOS/OmniDiskSweeper & '
  }

  updatesoftware()
  {
    sudo softwareupdate --dump-state -i -a
  }

else
  :
fi



#######################################################################
##################### Finished PS1 configuration ######################
#######################################################################

# Google things from the command line, e.g. google Jake Wright
function google() {
    QUERY=$( rawurlencode "$*" )
    brave "https://www.google.co.uk/search?client=safari&rls=en&q=$QUERY&ie=UTF-8&oe=UTF-8"
}

# URL encoding function taken from https://stackoverflow.com/a/10660730
function rawurlencode() {
  local string="${1}"
  local strlen=${#string}
  local encoded=""
  local pos c o

  for (( pos=0 ; pos<strlen ; pos++ )); do
     c=${string:$pos:1}
     case "$c" in
        [-_.~a-zA-Z0-9] ) o="${c}" ;;
        * )               printf -v o '%%%02x' "'$c"
     esac
     encoded+="${o}"
  done
  echo "${encoded}"    # You can either set a return variable (FASTER)
  REPLY="${encoded}"   #+or echo the result (EASIER)... or both... :p
}

vimdir()
{
  if [[ $( command -v git ) ]]; then
    local globalGitignore
    globalGitignore=$( git config --get core.excludesfile )
    if [[ $globalGitignore ]]; then
      if [[ ! $( grep '.project_alt.json' $globalGitignore ) ]]; then
        echo ".project_alt.json" >> "$globalGitignore";
      fi
    fi
  fi
  if [[ "$1" == "init" ]]; then
    [[ ! "$2" ]] && { echo "usage: vimdir init <lang>"; __exit; }
    [[ -n $3 ]] && { __exit "Error: $3"; };
    local lang
    lang="$2"
    if [[ ! -f ~/.vimdir/${lang}.json ]]; then
      echo "$lang is not added in ~/.vimdir/"
    else
      if [[ -f ./.project_alt.json ]]; then
        if [[ -f ./.vimlang ]]; then
          lang=$(cat ./.vimlang)
        else
          lang=""
        fi
      echo "Already initialised $lang"
      else
        echo "$lang" > ./.vimlang
        cp ~/.vimdir/${lang}.json ./.project_alt.json
        echo "Project for $lang is initialised successfully"
      fi
    fi
  elif [[ "$1" == "rm" ]]; then
    if [[ -f ./.project_alt.json ]]; then
      rm ./.project_alt.json
      else
        echo "No project found"
    fi
  fi
}

show_paths()
{
## usage: <no> shows with number
  if [[ "$1" == "no" ]]; then
    echo $PATH | tr ":" "\n" | nl;
  else
    old=$IFS
    IFS=:
    printf "%s\n" $PATH
    IFS=$old
  fi
}

weather()
{
  city="$1"
  [[ ! $city ]] && { echo "Argument missing"; echo "Usage: weather <city_name>"; __exit; }
  [[ "$2" ]] && { echo "Only accepts one argument"; __exit; }

  curl wttr.in/${city}
}

mosth()
{
  unset HISTTIMEFORMAT;
  history \
      | awk '($2 !~ "^\\./") { CMD[$2]++; count++; } END { for (a in CMD) { printf ("%4d %5.1f%% %s\n",CMD[a],CMD[a]/count*100,a); } }' \
      | sort -nr \
      | head \
      | nl;
  export HISTTIMEFORMAT="[%F %T] ";
}

ps10()
{
  ps aux | sort -rk 4,4 | head -n 10
}

get_available_ip()
{
  if [[ "$1" == "nmap" ]]; then
    nmap -sP 192.168.1.0/24; arp -n | grep "192.168.1.[0-9]* *ether"
  elif [[ "$1" == "ping" ]]; then
    ping -c2 192.168.1.255 >/dev/null; arp -a
  else
    echo "usage: get_available_ip <nmap or ping>"
  fi
}

xmanpage() { open x-man-page://$@ ; }
preman() { man -t "$@" | open -f -a "Preview" ;}
gman() {
     man "$1" | col -b > "/tmp/$1"
     open -a "/Applications/Google Chrome.app" "/tmp/$1"
}

startclock()
{
  while sleep 1; do
    tput sc;
    tput cup 0 $(($(tput cols)-29));
    date;
    tput rc;
  done &
  local pid=$!
  echo "$pid" > /tmp/.startclockpid
}

stopclock()
{
  kill -9 $(cat /tmp/.startclockpid)
}

jekyll-serve()
{
  bundle exec jekyll serve
}

qsort(){ ## pass array as an positional arguments to this function
  local pivot i smaller=() larger=(); qsort_return=() ## declare var and arrays
  (($#==0)) && return 0; pivot=$1; shift
  for i; do (( i < pivot )) && { smaller+=( "$i" ); } || { larger+=( "$i" ); }; done
    qsort "${smaller[@]}"; smaller=( "${qsort_return[@]}" );
    qsort "${larger[@]}"; larger=( "${qsort_return[@]}" );
    qsort_return=( "${smaller[@]}" "$pivot" "${larger[@]}" )
}

getFileByExt(){
local extension="$1"
if (( $# == 1 )); then
for file in *; do
  if [[ $file =~ \.$extension$ ]]; then
    echo $file
  fi
done
else
  echo "Usage: ${FUNCNAME[0]} <extension>"
fi
}

getFileWithoutExt(){
local extension="$1"
if (( $# == 1 )); then
for file in *; do
  if [[ ! $file =~ \.$extension$ ]]; then
    echo $file
  fi
done
else
  echo "Usage: ${FUNCNAME[0]} <extension>"
fi
}

zmq_push(){
        m=$(</dev/stdin) && \
        printf "$(printf '\\\\x01\\\\x00\\\\x%02x\\\\x00%s' ${#m} "$m")" \
        >/dev/tcp/$1/$2
}

zmqSendMsg(){
  shift 1; printf "$1" | zmq_push "$@"
}

getBatteryDetails(){
  pmset "$@"
}

tm(){
  if [[ ! "$1" ]]; then
    echo "No argument passed.."
  else
    tmux detach -E "tmux new -A -s '$1'";
  fi
}

# fd - cd to selected directory
fd() {
  local dir
  dir=$(find ${1:-.} -path '*/\.*' -prune \
                  -o -type d -print 2> /dev/null | fzf +m) &&
  cd "$dir"
}

# fh - search in your command history and execute selected command
fh() {
  eval $( ([ -n "$ZSH_NAME" ] && fc -l 1 || history) | fzf +s --tac | sed 's/ *[0-9]* *//' | cut -d ' ' -f3- ) 
}

# ch - browse chrome history
ch() {
  local cols sep
  cols=$(( COLUMNS / 3 ))
  sep='{::}'

  cp -f ~/Library/Application\ Support/Google/Chrome/Profile\ 1/History /tmp/h

  sqlite3 -separator $sep /tmp/h \
    "select substr(title, 1, $cols), url
     from urls order by last_visit_time desc" |
  awk -F $sep '{printf "%-'$cols's  \x1b[36m%s\x1b[m\n", $1, $2}' |
  fzf --ansi --multi | sed 's#.*\(https*://\)#\1#' | xargs open
}

how2do(){ # how to do something, find out from terminal
  local lang="${1}"
  local search="${2}"
  curl cht.sh/"${lang}"/"${search}"
}

random-strings(){
 if [[ "$(uname)" == "Darwin" ]]; then
   LC_CTYPE=C tr -dc A-Za-z0-9 < /dev/urandom | fold -w ${1:-32} | head -n 1
 else
   cat /dev/urandom | tr -dc 'a-zA-Z0-9' | fold -w ${1:-32} | head -n 1
 fi
}

play-it(){ # play anything, ie youtube playlist, mp3, mp4 etc from terminal
 if [[ "$1" == "loop" ]] && [[ "$2" ]]; then
  ( mpv --loop "$2" > /dev/null 2>&1 & 
    disown )
 else
  ( mpv "$1" > /dev/null 2>&1 & 
    disown )
 fi
 if [[ ! "$1" ]]; then
   echo "Usage: ${FUNCNAME[0]} <things-to-play-i.e.youtube-links>"
   echo "For example: ${FUNCNAME[0]} https://www.youtube.com/watch?v=_2quiyHfJQw"
   echo "You can also pass youtube playlist as arg"
   echo "Use --loop to loop around"
   echo "Upgrade youtube-dl with pip if you have problem playing videos with 'sudo pip install --upgrade youtube_dl'"
 fi
}

zeal(){
  ( /usr/local/bin/zeal "$@" &
  disown )
}

open-tmux(){
local tmuxSession="rakib"
  # https://unix.stackexchange.com/questions/43601/how-can-i-set-my-default-shell-to-start-up-tmux
if command -v tmux &> /dev/null && [ -n "$PS1" ] && [[ ! "$TERM" =~ screen ]] && [[ ! "$TERM" =~ tmux ]] && [ -z "$TMUX" ]; then
  # https://unix.stackexchange.com/questions/103898/how-to-start-tmux-with-attach-if-a-session-exists/176885#176885
  if [[ ! $(tmux ls | grep -w "${tmuxSession}" ) ]]; then
    tmux new -s ${tmuxSession} -d
    tmux source-file $HOME/.tmuxsession.conf.rak # do this if tmuxSession is not created
    tmux source-file $HOME/.tmux.conf.rak # source tmux config
  else
    # do this if tmuxSession is already created and attached
    if [[ ! $(tmux ls | grep -w attached | grep -w "${tmuxSession}") ]]; then
      tmux attach -t "${tmuxSession}" # do this if tmuxSession is not attached
      tmux source-file $HOME/.tmux.conf.rak # source tmux config
    fi
  fi
fi
}

organise_files_by_extension(){

## Will create folder by extension and move all files in them
## Usage: Organise <path> <showlog>
## Organise your folder by extensions
## For example ./organise ~/Downloads

path="${1:-$(pwd)}"
debug="${2:-"false"}"

  getext(){
    filename="$1"
    case $filename in
      (*.*) local ext=${filename##*.} && echo ${ext};;
    esac
  }
  
  __help__(){
  echo "Usage: $0 <path> <Optional:showlog>"
  echo "Usage: $0 # will organise current path by extension"
  echo "Usage: $0 ~/Downloads # will organise Downloads by extension"
  }

  __main__(){
  if [[ "$path" == "-h" ]] || [[ "$path" == "-help" ]]; then
    __help__
  else
    if [[ -d ${path} ]]; then
    for file in ${path}/*; do
      if [[ -f ${file} ]]; then
        local extension="$(getext "$file")"
        local extpath="${path}/${extension}"
        [[ "${extension}" == "" ]] && continue
        mkdir -p ${extpath}
        mv "${file}" ${extpath}/ && [[ "${debug}" == "showlog" ]] && echo "${file} will go to: $extpath"
      fi
      done
    fi
  fi
  }

  __main__
}

compcpp(){
  local input="$1"
  local output=${2:-"a.out"}
  local exc=${3:-"false"}
  # output=$(echo "${output}" | sed 's/[-%+=$!#<>&]//')
  
  if [[ "${output}" == "exc" ]] || [[ "${output}" == "-e" ]]; then
    exc="exc"
    output="a.out"
  fi

  if [[ "$input" == "-h" ]] || [[ "$input" == "-help" ]]; then
    echo "Usage: ${FUNCNAME[0]} < Input file > < Optional: Output, Default: a.out > < Optional: exc | -e, Default:false >"
    echo "For example, ${FUNCNAME[0]} foobar.cpp -e ## Will compile foobar.cpp and execute"
    echo "For example, ${FUNCNAME[0]} foo.cpp foo ## Will compile foo.cpp and save executable as foo"
    echo "For example, ${FUNCNAME[0]} bar.cpp bar -e ## Will compile bar.cpp as bar and execute at the same time"
  else
    g++ -W -Wall -pedantic -o ${output} -p ${input} -Qunused-arguments
      if (( $? == 0 )); then
        if [[ "$exc" == "exc" ]] || [[ "$exc" == "-e" ]]; then
        ./${output}
        fi
      fi
  fi
}

source_settings(){
  ## source in your bashrc or bash_profile
  set -o vi # press ESC and v to open command buffer
  alias tree="tree -CAFa -I 'CVS|*.*.package|.svn|.git' --dirsfirst"
  alias screensaver='for ((;;)); do echo -ne "\033[$((1+RANDOM%LINES));$((1+RANDOM%COLUMNS))H\033[$((RANDOM%2));3$((RANDOM%8))m$((RANDOM%10))"; sleep 0.1 ; done'
  alias l='ls'
  alias ll='ls -lai'
  alias gts='git status'
  alias gcm='git commit -am'
  alias gpo='git push origin'
  alias ga='git add'
  alias shopt="/usr/local/bin/shopt" #|| __shopt__ > "${shoptpath}" && chmod +x "${shoptpath}" && alias shopt="${shoptpath}"
  # alias sudo='sudo -h 127.0.0.1' # https://askubuntu.com/a/1060349/900143
  export EDITOR="nvim";
  alias vim="nvim"; 
  # https://superuser.com/questions/137438/how-to-unlimited-bash-shell-history
  export HISTTIMEFORMAT="[%F %T] "
  export HISTFILESIZE=
  export HISTSIZE=
  shopt -s histappend
  # https://www.commandlinefu.com/commands/view/3858/commit-command-to-history-file-immedeately-after-execution
  # PROMPT_COMMAND="history -a"
  # spacevim python3
  export PYTHON3_HOST_PROG="/usr/local/bin/python3"
  export PYTHON_HOST_PROG="/usr/local/bin/python"
  export PROMPT_COMMAND="myPS1Prompt" ## using it to activate the PS1 prompt
  bind 'set show-all-if-ambiguous on'
  bind 'set menu-complete-display-prefix on'
  bind 'TAB:menu-complete'
  #bind 'set completion-display-width 0'
  bind 'set colored-completion-prefix on'
  bind 'set colored-stats on'
  #bind 'set completion-ignore-case on'
  shopt -s cdspell
  complete -d cd
  open-tmux
}


if [[ ${BASH_SOURCE[0]} == "$0" ]]; then
  #: #install/uninstall
install(){
  curDir=$(pwd)
  echo $curDir
  ln -s ${curDir}/.SpaceVim ${HOME}/.SpaceVim
  ln -s ${curDir}/.SpaceVim.d ${HOME}/.SpaceVim.d
  ln -s ${curDir}/.tmux.conf.rak ${HOME}/.tmux.conf.rak
  local fl=$(basename ${BASH_SOURCE[0]})
  ln -s ${curDir}/${fl} ${HOME}/${fl}
  curl -sLf https://spacevim.org/install.sh | bash

  sudo apt update && sudo apt install jq tmux tty-clock -y
  git clone --depth 1 https://github.com/junegunn/fzf.git ~/.fzf && ~/.fzf/install
  echo "Add '. ${HOME}/${fl}' in ${HOME}/.bashrc"
}

  if [[ "$1" == "install" && ! "$2" ]]; then
    install
  fi

else
  source_settings
fi
